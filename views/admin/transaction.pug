doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css')
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css')
  style.
    .gradient-bg {
    background: linear-gradient(to right, #2563EB, #6366F1);
    }
    .card-shadow {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    }
    .status-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    }
    .btn-primary {
    background-color: #3b82f6;
    color: white;
    transition: background-color 0.3s ease;
    }
    .btn-primary:hover {
    background-color: #2563eb;
    }
.min-h-screen.bg-gray-50.py-8.px-4
  .max-w-4xl.mx-auto
    .bg-white.rounded-2xl.card-shadow.overflow-hidden
      .gradient-bg.px-6.py-8.text-white
        .flex.items-center.justify-between
          div
            h1.text-2xl.font-bold Transaction Details
            p#headerTransactionId.text-blue-100 #{transaction.transaction_id}
          #statusContainer.text-right
      .p-6
        .grid.grid-cols-1.gap-8.mb-8(class='lg:grid-cols-2')
          .bg-gray-50.rounded-lg.p-6
            h2.text-lg.font-semibold.text-gray-800.mb-4
              i.fas.fa-info-circle.mr-2
              |                 Basic Information
            .space-y-3.text-sm
              div
                span.font-medium.text-gray-600 Transaction ID:
                p#basicTransactionId.text-gray-900.font-mono.break-all = transaction.transaction_id
              div
                span.font-medium.text-gray-600 Case ID:
                p#basicCaseId.text-gray-900 ##{transaction.case_id}
              div
                span.font-medium.text-gray-600 Payment Method:
                p#basicPaymentMethod.text-gray-900.uppercase.font-semibold = transaction.payment_method
              div
                span.font-medium.text-gray-600 Created:
                p#basicCreatedAt.text-gray-900 = formatDate(transaction.created_at)
              div
                span.font-medium.text-gray-600 Last Updated:
                p#basicUpdatedAt.text-gray-900 = formatDate(transaction.updated_at)
          .bg-gray-50.rounded-lg.p-6
            h2.text-lg.font-semibold.text-gray-800.mb-4
              i.fas.fa-dollar-sign.mr-2
              |                 Financial Breakdown
            .space-y-3.text-sm
              div
                span.font-medium.text-gray-600 Total Amount:
                p#financialTotalAmount.text-gray-900.font-bold.text-lg = formatCurrency(transaction.total_amount)
              div
                span.font-medium.text-gray-600 Admin Commission (10%):
                p#financialCommissionAmount.text-gray-900.font-semibold
                  | = formatCurrency(transaction.commission_amount || (transaction.total_amount * 0.1))
              div
                span.font-medium.text-gray-600 Craftsman Amount (90%):
                p#financialCraftsmanAmount.text-gray-900.font-semibold
                  | = formatCurrency(transaction.disbursement_amount || (transaction.total_amount * 0.9))
        .bg-gray-50.rounded-lg.p-6.mb-8
          h2.text-lg.font-semibold.text-gray-800.mb-4
            i.fas.fa-users.mr-2
            |               Contact Information
          .grid.grid-cols-1.gap-6.text-sm(class='md:grid-cols-2')
            div
              span.font-medium.text-gray-600 Employer Phone:
              p#employerPhone.text-gray-900.font-semibold = transaction.employer_phone
            div
              span.font-medium.text-gray-600 Craftsman Phone:
              p#craftsmanPhone.text-gray-900.font-semibold = transaction.craftsman_phone
        .bg-gray-50.rounded-lg.p-6.mb-8
          h2.text-lg.font-semibold.text-gray-800.mb-4
            i.fas.fa-history.mr-2
            |               Activity Timeline
          #activityLogContainer.space-y-4
        .flex.flex-col.gap-4(class='sm:flex-row')
          a.flex.items-center.justify-center.px-6.py-3.bg-gray-100.text-gray-700.font-medium.rounded-lg.transition-all(class='hover:bg-gray-200' href='/admin/dashboard-payment')
            i.fas.fa-arrow-left.mr-2
            |               Back to Payments
          form#disburseForm(action='/payment/disburse/#{transaction.transaction_id}' method='POST' style='display: none;')
            input(type='hidden' name='paymentMethod' value='= transaction.payment_method')
            button#releaseFundsBtn.flex.items-center.justify-center.px-6.py-3.btn-primary.text-white.font-medium.rounded-lg(type='submit')
              i.fas.fa-paper-plane.mr-2
              |                   Release Funds to Craftsman
script.
  // Helper function to format currency
  function formatCurrency(amount) {
  if (amount === undefined || amount === null) return 'N/A';
  return `UGX ${new Intl.NumberFormat().format(amount)}`;
  }
  // Helper function to format date
  function formatDate(dateString) {
  if (!dateString) return 'N/A';
  const date = new Date(dateString);
  return date.toLocaleString();
  }
  // Helper function to get status badge classes and icon
  function getStatusInfo(status) {
  switch (status) {
  case 'PENDING': return { classes: 'bg-gray-100 text-gray-800', icon: 'fas fa-clock' };
  case 'PAYMENT_REQUESTED': return { classes: 'bg-blue-100 text-blue-800', icon: 'fas fa-mobile-alt' };
  case 'SUCCESSFUL': return { classes: 'bg-green-100 text-green-800', icon: 'fas fa-check-circle' };
  case 'PAYMENT_FAILED': return { classes: 'bg-red-100 text-red-800', icon: 'fas fa-times-circle' };
  case 'DISBURSEMENT_INITIATED': return { classes: 'bg-yellow-100 text-yellow-800', icon: 'fas fa-arrow-right' };
  case 'COMPLETED': return { classes: 'bg-green-100 text-green-800', icon: 'fas fa-check-circle' };
  case 'DISBURSEMENT_FAILED': return { classes: 'bg-red-100 text-red-800', icon: 'fas fa-exclamation-triangle' };
  default: return { classes: 'bg-gray-100 text-gray-800', icon: 'fas fa-question' };
  }
  }
  // Helper function to get log icon
  function getLogIcon(status) {
  switch (status) {
  case 'SUCCESSFUL': return 'fas fa-check';
  case 'FAILED': return 'fas fa-times';
  case 'INITIATED': return 'fas fa-play';
  default: return 'fas fa-circle';
  }
  }
  // Helper function to get log icon color
  function getLogColor(status) {
  switch (status) {
  case 'SUCCESSFUL': return 'green';
  case 'FAILED': return 'red';
  case 'INITIATED': return 'blue';
  default: return 'gray';
  }
  }
  document.addEventListener('DOMContentLoaded', function () {
  const transactionId = '#{transaction.transaction_id}';
  const statusContainer = document.getElementById('statusContainer');
  const financialTotalAmount = document.getElementById('financialTotalAmount');
  const financialCommissionAmount = document.getElementById('financialCommissionAmount');
  const financialCraftsmanAmount = document.getElementById('financialCraftsmanAmount');
  const paymentReference = document.getElementById('paymentReference');
  const disbursementReference = document.getElementById('disbursementReference');
  const activityLogContainer = document.getElementById('activityLogContainer');
  const disburseForm = document.getElementById('disburseForm');
  const updateUI = (transaction, logs) => {
  // Update Status Badge
  const statusInfo = getStatusInfo(transaction.status);
  statusContainer.innerHTML = `
  <div class="status-badge ${statusInfo.classes}">
  <i class="${statusInfo.icon} mr-1"></i>
  ${transaction.status.replace(/_/g, ' ')}
  </div>
  `;
  // Update Financial Details
  if (financialTotalAmount) financialTotalAmount.textContent = formatCurrency(transaction.total_amount);
  if (financialCommissionAmount) financialCommissionAmount.textContent = formatCurrency(transaction.commission_amount || (transaction.total_amount * 0.1));
  if (financialCraftsmanAmount) financialCraftsmanAmount.textContent = formatCurrency(transaction.disbursement_amount || (transaction.total_amount * 0.9));
  // Update References if they exist
  if (paymentReference) paymentReference.textContent = transaction.payment_reference || 'N/A';
  if (disbursementReference) disbursementReference.textContent = transaction.disbursement_reference || 'N/A';
  // Update Activity Log
  if (activityLogContainer) {
  activityLogContainer.innerHTML = '';
  logs.forEach(log => {
  const logElement = document.createElement('div');
  logElement.className = 'flex items-start space-x-4 p-4 bg-white rounded-lg border';
  logElement.innerHTML = `
  <div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 bg-${getLogColor(log.status)}-100">
  <i class="${getLogIcon(log.status)} text-${getLogColor(log.status)}-600 text-sm"></i>
  </div>
  <div class="flex-1">
  <div class="flex items-center justify-between mb-1">
  <h3 class="font-medium text-gray-900">${log.action.replace(/_/g, ' ')}</h3>
  <span class="text-xs text-gray-500">${formatDate(log.created_at)}</span>
  </div>
  <p class="text-sm text-gray-600 capitalize">${log.status.toLowerCase()}</p>
  ${log.error_message ? `<p class="text-sm text-red-600 mt-2 bg-red-50 p-2 rounded">${log.error_message}</p>` : ''}
  </div>
  `;
  activityLogContainer.appendChild(logElement);
  });
  }
  // Show/Hide "Release Funds" button
  if (disburseForm) {
  if (transaction.status === 'SUCCESSFUL') {
  disburseForm.style.display = 'flex';
  } else {
  disburseForm.style.display = 'none';
  }
  }
  };
  async function checkStatus() {
  try {
  const response = await fetch(`/api/transactions/${transactionId}`);
  if (!response.ok) {
  throw new Error('Failed to fetch transaction data.');
  }
  const data = await response.json();
  const { transaction, logs } = data;
  updateUI(transaction, logs);
  // Stop polling when the transaction reaches a final state
  if (['COMPLETED', 'DISBURSEMENT_FAILED', 'PAYMENT_FAILED'].includes(transaction.status)) {
  console.log('Transaction status is final. Stopping polling.');
  } else {
  setTimeout(checkStatus, 5000); // Poll every 5 seconds
  }
  } catch (error) {
  console.error('Error fetching transaction status:', error);
  setTimeout(checkStatus, 10000); // Retry after a longer delay
  }
  }
  // Hide the form initially if the status is not 'SUCCESSFUL'
  if (disburseForm) {
  if ('#{transaction.status}' !== 'SUCCESSFUL') {
  disburseForm.style.display = 'none';
  } else {
  disburseForm.style.display = 'flex';
  }
  }
  // Start the polling process
  checkStatus();
  });